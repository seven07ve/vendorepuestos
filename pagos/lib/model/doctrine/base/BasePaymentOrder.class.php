<?php

/**
 * BasePaymentOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $element_id
 * @property enum $element_type
 * @property enum $system_action
 * @property integer $amount
 * @property string $order_id
 * @property enum $order_status
 * @property enum $transaction_status
 * @property integer $response_code
 * @property string $merchant_usn
 * @property string $customer_id
 * @property string $customer_name
 * @property string $customer_email
 * @property string $card_number
 * @property string $nit
 * @property string $customer_receipt
 * @property string $merchant_receipt
 * @property string $authorizer_id
 * @property string $acquirer
 * @property string $authorization_number
 * @property string $esitef_usn
 * @property string $host_usn
 * @property string $message
 * 
 * @method integer      getElementId()            Returns the current record's "element_id" value
 * @method enum         getElementType()          Returns the current record's "element_type" value
 * @method enum         getSystemAction()         Returns the current record's "system_action" value
 * @method integer      getAmount()               Returns the current record's "amount" value
 * @method string       getOrderId()              Returns the current record's "order_id" value
 * @method enum         getOrderStatus()          Returns the current record's "order_status" value
 * @method enum         getTransactionStatus()    Returns the current record's "transaction_status" value
 * @method integer      getResponseCode()         Returns the current record's "response_code" value
 * @method string       getMerchantUsn()          Returns the current record's "merchant_usn" value
 * @method string       getCustomerId()           Returns the current record's "customer_id" value
 * @method string       getCustomerName()         Returns the current record's "customer_name" value
 * @method string       getCustomerEmail()        Returns the current record's "customer_email" value
 * @method string       getCardNumber()           Returns the current record's "card_number" value
 * @method string       getNit()                  Returns the current record's "nit" value
 * @method string       getCustomerReceipt()      Returns the current record's "customer_receipt" value
 * @method string       getMerchantReceipt()      Returns the current record's "merchant_receipt" value
 * @method string       getAuthorizerId()         Returns the current record's "authorizer_id" value
 * @method string       getAcquirer()             Returns the current record's "acquirer" value
 * @method string       getAuthorizationNumber()  Returns the current record's "authorization_number" value
 * @method string       getEsitefUsn()            Returns the current record's "esitef_usn" value
 * @method string       getHostUsn()              Returns the current record's "host_usn" value
 * @method string       getMessage()              Returns the current record's "message" value
 * @method PaymentOrder setElementId()            Sets the current record's "element_id" value
 * @method PaymentOrder setElementType()          Sets the current record's "element_type" value
 * @method PaymentOrder setSystemAction()         Sets the current record's "system_action" value
 * @method PaymentOrder setAmount()               Sets the current record's "amount" value
 * @method PaymentOrder setOrderId()              Sets the current record's "order_id" value
 * @method PaymentOrder setOrderStatus()          Sets the current record's "order_status" value
 * @method PaymentOrder setTransactionStatus()    Sets the current record's "transaction_status" value
 * @method PaymentOrder setResponseCode()         Sets the current record's "response_code" value
 * @method PaymentOrder setMerchantUsn()          Sets the current record's "merchant_usn" value
 * @method PaymentOrder setCustomerId()           Sets the current record's "customer_id" value
 * @method PaymentOrder setCustomerName()         Sets the current record's "customer_name" value
 * @method PaymentOrder setCustomerEmail()        Sets the current record's "customer_email" value
 * @method PaymentOrder setCardNumber()           Sets the current record's "card_number" value
 * @method PaymentOrder setNit()                  Sets the current record's "nit" value
 * @method PaymentOrder setCustomerReceipt()      Sets the current record's "customer_receipt" value
 * @method PaymentOrder setMerchantReceipt()      Sets the current record's "merchant_receipt" value
 * @method PaymentOrder setAuthorizerId()         Sets the current record's "authorizer_id" value
 * @method PaymentOrder setAcquirer()             Sets the current record's "acquirer" value
 * @method PaymentOrder setAuthorizationNumber()  Sets the current record's "authorization_number" value
 * @method PaymentOrder setEsitefUsn()            Sets the current record's "esitef_usn" value
 * @method PaymentOrder setHostUsn()              Sets the current record's "host_usn" value
 * @method PaymentOrder setMessage()              Sets the current record's "message" value
 * 
 * @package    ptoventavr
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePaymentOrder extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('payment_order');
        $this->hasColumn('element_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('element_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'product',
              1 => 'store',
             ),
             'notnull' => true,
             'default' => 'product',
             ));
        $this->hasColumn('system_action', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'new',
              1 => 'edit',
             ),
             'notnull' => true,
             'default' => 'new',
             ));
        $this->hasColumn('amount', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('order_id', 'string', 20, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 20,
             ));
        $this->hasColumn('order_status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'unprocessed',
              1 => 'processing',
              2 => 'success',
              3 => 'fail',
              4 => 'timeout',
              5 => 'timeout_fail',
             ),
             'notnull' => true,
             'default' => 'unprocessed',
             ));
        $this->hasColumn('transaction_status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'NOV',
              1 => 'INV',
              2 => 'PPC',
              3 => 'PPN',
              4 => 'CON',
              5 => 'NEG',
              6 => 'CAN',
              7 => 'ERR',
              8 => 'BLQ',
              9 => 'TBE',
              10 => 'TNB',
             ),
             'notnull' => true,
             'default' => 'TNB',
             ));
        $this->hasColumn('response_code', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('merchant_usn', 'string', 12, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 12,
             ));
        $this->hasColumn('customer_id', 'string', 20, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 20,
             ));
        $this->hasColumn('customer_name', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('customer_email', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('card_number', 'string', 20, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 20,
             ));
        $this->hasColumn('nit', 'string', 64, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 64,
             ));
        $this->hasColumn('customer_receipt', 'string', 4000, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 4000,
             ));
        $this->hasColumn('merchant_receipt', 'string', 4000, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 4000,
             ));
        $this->hasColumn('authorizer_id', 'string', 3, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 3,
             ));
        $this->hasColumn('acquirer', 'string', 50, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 50,
             ));
        $this->hasColumn('authorization_number', 'string', 6, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 6,
             ));
        $this->hasColumn('esitef_usn', 'string', 15, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 15,
             ));
        $this->hasColumn('host_usn', 'string', 15, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 15,
             ));
        $this->hasColumn('message', 'string', 500, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 500,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}